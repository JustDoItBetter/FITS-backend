openapi: 3.0.3
info:
  title: FITS Backend API
  version: 1.0.0
  description: |
    # FITS (Flexible IT Training System) Backend API

    Production-ready REST API for managing students, teachers, authentication, and signing workflows.

    ## Features
    - JWT-based authentication with refresh tokens
    - Role-based access control (Admin, Teacher, Student)
    - Invitation system for user onboarding
    - Student and teacher management with pagination
    - Digital signing workflow for reports
    - Rate limiting and security headers

    ## Authentication Flow
    1. **Bootstrap Admin**: `POST /api/v1/bootstrap/init` (one-time setup)
    2. **Login**: `POST /api/v1/auth/login` (get access + refresh tokens)
    3. **Use Access Token**: Include `Authorization: Bearer {access_token}` header
    4. **Refresh Token**: `POST /api/v1/auth/refresh` when access token expires
    5. **Logout**: `POST /api/v1/auth/logout` to invalidate tokens

    ## Rate Limiting
    - Global: 100 requests/minute per IP
    - Per-user: Varies by role (Admin: 200/min, Teacher: 100/min, Student: 50/min)

    ## Pagination
    All list endpoints support:
    - `page` (default: 1, min: 1)
    - `limit` (default: 20, max: 100)
  termsOfService: https://fits.example.com/terms
  contact:
    name: API Support Team
    email: support@fits.example.com
    url: https://fits.example.com/support
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.fits.example.com
    description: Production server
  - url: https://staging-api.fits.example.com
    description: Staging server

tags:
  - name: Bootstrap
    description: Initial system setup and admin creation
  - name: Authentication
    description: Login, logout, and token management
  - name: Invitations
    description: User invitation system for onboarding
  - name: Students
    description: Student management operations
  - name: Teachers
    description: Teacher management operations
  - name: Signing
    description: Digital signing workflow for reports
  - name: Health
    description: Health check and system status

security:
  - BearerAuth: []

paths:
  # ==================== HEALTH CHECK ====================
  /health:
    get:
      summary: Health check
      description: Check API and database health status
      operationId: healthCheck
      tags: [Health]
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  database:
                    type: string
                    example: connected
                  time:
                    type: string
                    format: date-time
                    example: "2025-10-22T14:30:00Z"
              examples:
                healthy:
                  summary: Healthy service
                  value:
                    status: ok
                    database: connected
                    time: "2025-10-22T14:30:00Z"
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  database:
                    type: string
                  time:
                    type: string
              examples:
                unhealthy:
                  summary: Database connection failed
                  value:
                    status: unhealthy
                    database: disconnected
                    time: "2025-10-22T14:30:00Z"

  # ==================== BOOTSTRAP ====================
  /api/v1/bootstrap/init:
    post:
      summary: Initialize admin certificate
      description: |
        Generate admin RSA keypair and return admin token.
        **Can only be called once** - subsequent calls will fail.

        This is the first endpoint to call when setting up the system.
        Save the returned `admin_token` securely.
      operationId: bootstrapInit
      tags: [Bootstrap]
      security: []
      responses:
        '200':
          description: Admin certificate generated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BootstrapResponse'
              examples:
                success:
                  summary: Successful bootstrap
                  value:
                    success: true
                    message: Admin certificate generated successfully
                    data:
                      admin_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYWRtaW4tMTIzNCIsInJvbGUiOiJhZG1pbiIsInRva2VuX3R5cGUiOiJhY2Nlc3MiLCJleHAiOjE3Mjk2ODk2MDAsImlhdCI6MTcyOTY4NjAwMH0.abc123xyz
                      message: Admin certificate generated successfully
                      public_key_path: ./configs/keys/admin.pub
        '400':
          description: Already initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                alreadyInitialized:
                  summary: System already initialized
                  value:
                    success: false
                    code: 400
                    error: Bad Request
                    details: Admin already initialized. Bootstrap can only be called once.
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== AUTHENTICATION ====================
  /api/v1/auth/login:
    post:
      summary: User login
      description: |
        Authenticate with username and password.
        Returns access token (short-lived) and refresh token (long-lived).
      operationId: authLogin
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              studentLogin:
                summary: Student login
                value:
                  username: max.mustermann
                  password: SecurePassword123!
              teacherLogin:
                summary: Teacher login
                value:
                  username: anna.schmidt
                  password: TeacherPass456!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
              examples:
                studentSuccess:
                  summary: Student login successful
                  value:
                    success: true
                    message: Login successful
                    data:
                      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      token_type: Bearer
                      expires_in: 3600
                      role: student
                      user_id: 550e8400-e29b-41d4-a716-446655440000
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  summary: Wrong username or password
                  value:
                    success: false
                    code: 401
                    error: Unauthorized
                    details: Invalid credentials
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/v1/auth/refresh:
    post:
      summary: Refresh access token
      description: |
        Get a new access token using a valid refresh token.
        The refresh token remains valid and is returned in the response.
      operationId: authRefresh
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              refreshExample:
                summary: Refresh token request
                value:
                  refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  summary: New access token generated
                  value:
                    success: true
                    message: Token refreshed successfully
                    data:
                      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      token_type: Bearer
                      expires_in: 3600
                      role: student
                      user_id: 550e8400-e29b-41d4-a716-446655440000
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                expired:
                  summary: Refresh token expired
                  value:
                    success: false
                    code: 401
                    error: Unauthorized
                    details: Refresh token expired
                invalid:
                  summary: Invalid refresh token
                  value:
                    success: false
                    code: 401
                    error: Unauthorized
                    details: Invalid refresh token

  /api/v1/auth/logout:
    post:
      summary: User logout
      description: |
        Invalidate all refresh tokens for the authenticated user.
        Access tokens remain valid until expiry (cannot be revoked).
      operationId: authLogout
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                success:
                  summary: Successfully logged out
                  value:
                    success: true
                    message: Logged out successfully
                    data: null
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ==================== INVITATIONS ====================
  /api/v1/admin/invite:
    post:
      summary: Create invitation
      description: |
        Create invitation link for new student or teacher (Admin only).

        **Required fields by role:**
        - **Student**: email, first_name, last_name, role=student, teacher_uuid
        - **Teacher**: email, first_name, last_name, role=teacher, department
      operationId: createInvitation
      tags: [Invitations]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvitationRequest'
            examples:
              studentInvite:
                summary: Invite a student
                value:
                  email: max.mustermann@example.com
                  first_name: Max
                  last_name: Mustermann
                  role: student
                  teacher_uuid: 550e8400-e29b-41d4-a716-446655440010
              teacherInvite:
                summary: Invite a teacher
                value:
                  email: anna.schmidt@example.com
                  first_name: Anna
                  last_name: Schmidt
                  role: teacher
                  department: Computer Science
      responses:
        '201':
          description: Invitation created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CreateInvitationResponse'
              examples:
                success:
                  summary: Invitation created
                  value:
                    success: true
                    message: Invitation created successfully
                    data:
                      invitation_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      invitation_link: https://fits.example.com/invite/eyJhbGc...
                      expires_at: "2025-10-25T12:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          description: Validation error - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingTeacherUuid:
                  summary: Student missing teacher_uuid
                  value:
                    success: false
                    code: 422
                    error: Validation Error
                    details: "teacher_uuid is required for student invitations"
                missingDepartment:
                  summary: Teacher missing department
                  value:
                    success: false
                    code: 422
                    error: Validation Error
                    details: "department is required for teacher invitations"

  /api/v1/invite/{token}:
    get:
      summary: Get invitation details
      description: |
        Retrieve invitation information by token.
        Used by frontend to show invitation details before registration.
      operationId: getInvitation
      tags: [Invitations]
      security: []
      parameters:
        - name: token
          in: path
          required: true
          description: JWT invitation token
          schema:
            type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Invitation details retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/InvitationResponse'
              examples:
                studentInvite:
                  summary: Student invitation
                  value:
                    success: true
                    data:
                      email: max.mustermann@example.com
                      first_name: Max
                      last_name: Mustermann
                      role: student
                      teacher_uuid: 550e8400-e29b-41d4-a716-446655440010
                      expires_at: "2025-10-25T12:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                expired:
                  value:
                    success: false
                    code: 401
                    error: Unauthorized
                    details: Invitation token expired
        '404':
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  value:
                    success: false
                    code: 404
                    error: Not Found
                    details: Invitation not found or already used

  /api/v1/invite/{token}/complete:
    post:
      summary: Complete invitation
      description: |
        Complete user registration with username and password.
        Creates user account and invalidates invitation token.
      operationId: completeInvitation
      tags: [Invitations]
      security: []
      parameters:
        - name: token
          in: path
          required: true
          description: JWT invitation token
          schema:
            type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteInvitationRequest'
            examples:
              registration:
                summary: Complete registration
                value:
                  username: max.mustermann
                  password: SecurePassword123!
      responses:
        '200':
          description: Registration completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                success:
                  value:
                    success: true
                    message: Registration completed successfully
                    data: null
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflict:
                  value:
                    success: false
                    code: 409
                    error: Conflict
                    details: Username already exists
        '422':
          $ref: '#/components/responses/ValidationError'

  # ==================== STUDENTS ====================
  /api/v1/student:
    get:
      summary: List students with pagination
      description: |
        Retrieve a paginated list of students.
        Supports filtering via query parameters.
      operationId: listStudents
      tags: [Students]
      security: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Paginated list of students
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStudentsResponse'
              examples:
                success:
                  summary: First page with 2 students
                  value:
                    success: true
                    page: 1
                    limit: 20
                    total_count: 150
                    total_pages: 8
                    data:
                      - uuid: 550e8400-e29b-41d4-a716-446655440000
                        email: max.mustermann@example.com
                        first_name: Max
                        last_name: Mustermann
                        teacher_id: 550e8400-e29b-41d4-a716-446655440010
                        created_at: "2025-09-30T12:00:00Z"
                        updated_at: "2025-09-30T12:00:00Z"
                      - uuid: 550e8400-e29b-41d4-a716-446655440001
                        email: lisa.mueller@example.com
                        first_name: Lisa
                        last_name: Mueller
                        teacher_id: 550e8400-e29b-41d4-a716-446655440010
                        created_at: "2025-09-29T10:30:00Z"
                        updated_at: "2025-09-29T10:30:00Z"
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new student
      description: |
        Create a new student record. Requires admin role.
        Email must be unique.
      operationId: createStudent
      tags: [Students]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
            examples:
              withTeacher:
                summary: Student with assigned teacher
                value:
                  email: max.mustermann@example.com
                  first_name: Max
                  last_name: Mustermann
                  teacher_id: 550e8400-e29b-41d4-a716-446655440010
              withoutTeacher:
                summary: Student without teacher (assign later)
                value:
                  email: lisa.mueller@example.com
                  first_name: Lisa
                  last_name: Mueller
      responses:
        '201':
          description: Student created successfully
          headers:
            Location:
              schema:
                type: string
              description: URI of created student
              example: /api/v1/student/550e8400-e29b-41d4-a716-446655440000
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Student'
              examples:
                success:
                  value:
                    success: true
                    message: Student created successfully
                    data:
                      uuid: 550e8400-e29b-41d4-a716-446655440000
                      email: max.mustermann@example.com
                      first_name: Max
                      last_name: Mustermann
                      teacher_id: 550e8400-e29b-41d4-a716-446655440010
                      created_at: "2025-10-22T14:30:00Z"
                      updated_at: "2025-10-22T14:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                emailConflict:
                  value:
                    success: false
                    code: 409
                    error: Conflict
                    details: A student with this email already exists
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/student/{uuid}:
    get:
      summary: Get student by UUID
      description: Retrieve detailed information about a specific student
      operationId: getStudent
      tags: [Students]
      security: []
      parameters:
        - $ref: '#/components/parameters/UuidParam'
      responses:
        '200':
          description: Student found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Student'
              examples:
                success:
                  value:
                    success: true
                    data:
                      uuid: 550e8400-e29b-41d4-a716-446655440000
                      email: max.mustermann@example.com
                      first_name: Max
                      last_name: Mustermann
                      teacher_id: 550e8400-e29b-41d4-a716-446655440010
                      created_at: "2025-09-30T12:00:00Z"
                      updated_at: "2025-09-30T12:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update student information
      description: |
        Update an existing student's information. Requires admin role.
        Supports partial updates - only provided fields will be updated.
      operationId: updateStudent
      tags: [Students]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UuidParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStudentRequest'
            examples:
              updateEmail:
                summary: Update email only
                value:
                  email: max.new@example.com
              updateAll:
                summary: Update all fields
                value:
                  email: moritz.schmidt@example.com
                  first_name: Moritz
                  last_name: Schmidt
                  teacher_id: 550e8400-e29b-41d4-a716-446655440011
      responses:
        '200':
          description: Student updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Student'
              examples:
                success:
                  value:
                    success: true
                    message: Student updated successfully
                    data:
                      uuid: 550e8400-e29b-41d4-a716-446655440000
                      email: moritz.schmidt@example.com
                      first_name: Moritz
                      last_name: Schmidt
                      teacher_id: 550e8400-e29b-41d4-a716-446655440011
                      created_at: "2025-09-30T12:00:00Z"
                      updated_at: "2025-10-22T14:35:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                emailConflict:
                  value:
                    success: false
                    code: 409
                    error: Conflict
                    details: Email already in use by another student
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a student
      description: |
        Soft delete a student from the system. Requires admin role.
        Student data is marked as deleted but not physically removed.
      operationId: deleteStudent
      tags: [Students]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UuidParam'
      responses:
        '204':
          description: Student deleted successfully (no content)
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== TEACHERS ====================
  /api/v1/teacher:
    get:
      summary: List teachers with pagination
      description: Retrieve a paginated list of teachers
      operationId: listTeachers
      tags: [Teachers]
      security: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Paginated list of teachers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTeachersResponse'
              examples:
                success:
                  value:
                    success: true
                    page: 1
                    limit: 20
                    total_count: 45
                    total_pages: 3
                    data:
                      - uuid: 550e8400-e29b-41d4-a716-446655440010
                        email: anna.schmidt@example.com
                        first_name: Anna
                        last_name: Schmidt
                        department: Computer Science
                        created_at: "2025-09-28T10:00:00Z"
                        updated_at: "2025-09-28T10:00:00Z"
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new teacher
      description: |
        Create a new teacher record. Requires admin role.
        Email must be unique. Department is required.
      operationId: createTeacher
      tags: [Teachers]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeacherRequest'
            examples:
              computerScience:
                summary: Computer Science teacher
                value:
                  email: anna.schmidt@example.com
                  first_name: Anna
                  last_name: Schmidt
                  department: Computer Science
              mathematics:
                summary: Mathematics teacher
                value:
                  email: peter.mueller@example.com
                  first_name: Peter
                  last_name: Mueller
                  department: Mathematics
      responses:
        '201':
          description: Teacher created successfully
          headers:
            Location:
              schema:
                type: string
              description: URI of created teacher
              example: /api/v1/teacher/550e8400-e29b-41d4-a716-446655440010
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Teacher'
              examples:
                success:
                  value:
                    success: true
                    message: Teacher created successfully
                    data:
                      uuid: 550e8400-e29b-41d4-a716-446655440010
                      email: anna.schmidt@example.com
                      first_name: Anna
                      last_name: Schmidt
                      department: Computer Science
                      created_at: "2025-10-22T14:30:00Z"
                      updated_at: "2025-10-22T14:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                emailConflict:
                  value:
                    success: false
                    code: 409
                    error: Conflict
                    details: A teacher with this email already exists
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/teacher/{uuid}:
    get:
      summary: Get teacher by UUID
      description: Retrieve detailed information about a specific teacher
      operationId: getTeacher
      tags: [Teachers]
      security: []
      parameters:
        - name: uuid
          in: path
          required: true
          description: Teacher UUID
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440010
      responses:
        '200':
          description: Teacher found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Teacher'
              examples:
                success:
                  value:
                    success: true
                    data:
                      uuid: 550e8400-e29b-41d4-a716-446655440010
                      email: anna.schmidt@example.com
                      first_name: Anna
                      last_name: Schmidt
                      department: Computer Science
                      created_at: "2025-09-28T10:00:00Z"
                      updated_at: "2025-09-28T10:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update teacher information
      description: |
        Update an existing teacher's information. Requires admin role.
        Supports partial updates including department changes.
      operationId: updateTeacher
      tags: [Teachers]
      security:
        - BearerAuth: []
      parameters:
        - name: uuid
          in: path
          required: true
          description: Teacher UUID
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440010
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeacherRequest'
            examples:
              updateDepartment:
                summary: Change department
                value:
                  department: Mathematics
              updateAll:
                summary: Update all fields
                value:
                  email: maria.mueller@example.com
                  first_name: Maria
                  last_name: Mueller
                  department: Physics
      responses:
        '200':
          description: Teacher updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Teacher'
              examples:
                success:
                  value:
                    success: true
                    message: Teacher updated successfully
                    data:
                      uuid: 550e8400-e29b-41d4-a716-446655440010
                      email: maria.mueller@example.com
                      first_name: Maria
                      last_name: Mueller
                      department: Physics
                      created_at: "2025-09-28T10:00:00Z"
                      updated_at: "2025-10-22T14:40:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                emailConflict:
                  value:
                    success: false
                    code: 409
                    error: Conflict
                    details: Email already in use by another teacher
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a teacher
      description: |
        Soft delete a teacher from the system. Requires admin role.
        Teacher data is marked as deleted but not physically removed.
      operationId: deleteTeacher
      tags: [Teachers]
      security:
        - BearerAuth: []
      parameters:
        - name: uuid
          in: path
          required: true
          description: Teacher UUID
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440010
      responses:
        '204':
          description: Teacher deleted successfully (no content)
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== SIGNING ====================
  /api/v1/signing/upload:
    post:
      summary: Upload parquet file
      description: |
        Upload a parquet file containing student data.
        Requires authentication. File size limited to configured maximum.
      operationId: uploadParquet
      tags: [Signing]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
                  description: Parquet file (max 10MB)
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UploadRecord'
              examples:
                success:
                  value:
                    success: true
                    message: File uploaded successfully
                    data:
                      upload_id: upload-20251022-143000-abc123
                      student_uuid: 550e8400-e29b-41d4-a716-446655440000
                      file_name: weekly_report_week40.parquet
                      file_size: 1024000
                      uploaded_at: 1729603800000
                      content_hash: sha256:a3b2c1d4e5f6...
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                fileTooLarge:
                  value:
                    success: false
                    code: 413
                    error: Payload Too Large
                    details: File size exceeds maximum allowed size of 10MB
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/signing/sign_requests:
    get:
      summary: Get pending sign requests
      description: |
        Retrieve all pending signature requests as a parquet file.
        Requires authentication.
      operationId: getSignRequests
      tags: [Signing]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Parquet file with pending sign requests
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
              example: attachment; filename=sign_requests_20251022.parquet
            Content-Type:
              schema:
                type: string
              example: application/octet-stream
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/signing/sign_uploads:
    post:
      summary: Upload signed requests
      description: |
        Upload a parquet file containing signed requests.
        Processes signatures and updates request status.
      operationId: uploadSignedRequests
      tags: [Signing]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
                  description: Parquet file with signed requests
      responses:
        '200':
          description: Signed requests processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                success:
                  value:
                    success: true
                    message: Signed requests processed successfully
                    data:
                      processed_count: 25
                      success_count: 24
                      failed_count: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token authentication.

        **Format**: `Authorization: Bearer {access_token}`

        **How to get tokens:**
        1. Login: `POST /api/v1/auth/login`
        2. Use returned `access_token` in Authorization header
        3. Refresh when expired: `POST /api/v1/auth/refresh`

  parameters:
    PageParam:
      name: page
      in: query
      required: false
      description: Page number (1-indexed)
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1

    LimitParam:
      name: limit
      in: query
      required: false
      description: Items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      example: 20

    UuidParam:
      name: uuid
      in: path
      required: true
      description: Resource UUID
      schema:
        type: string
        format: uuid
      example: 550e8400-e29b-41d4-a716-446655440000

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            invalidJson:
              summary: Invalid JSON
              value:
                success: false
                code: 400
                error: Bad Request
                details: Invalid JSON format
            invalidUuid:
              summary: Invalid UUID format
              value:
                success: false
                code: 400
                error: Bad Request
                details: Invalid UUID format

    Unauthorized:
      description: Unauthorized - missing or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missingToken:
              summary: Missing authorization header
              value:
                success: false
                code: 401
                error: Unauthorized
                details: Missing authorization token
            invalidToken:
              summary: Invalid or expired token
              value:
                success: false
                code: 401
                error: Unauthorized
                details: Invalid or expired token

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            insufficientPermissions:
              summary: Admin role required
              value:
                success: false
                code: 403
                error: Forbidden
                details: Admin role required

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            studentNotFound:
              summary: Student not found
              value:
                success: false
                code: 404
                error: Not Found
                details: Student not found
            teacherNotFound:
              summary: Teacher not found
              value:
                success: false
                code: 404
                error: Not Found
                details: Teacher not found

    ValidationError:
      description: Validation error - invalid field values
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            passwordTooShort:
              summary: Password validation failed
              value:
                success: false
                code: 422
                error: Validation Error
                details: Password must be at least 8 characters long
            invalidEmail:
              summary: Email validation failed
              value:
                success: false
                code: 422
                error: Validation Error
                details: Invalid email format
            missingField:
              summary: Required field missing
              value:
                success: false
                code: 422
                error: Validation Error
                details: "first_name is required"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            serverError:
              summary: Generic server error
              value:
                success: false
                code: 500
                error: Internal Server Error
                details: An unexpected error occurred. Please try again later.

  schemas:
    # ==================== COMMON RESPONSES ====================
    SuccessResponse:
      type: object
      required: [success]
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation successful
        data:
          type: object
          nullable: true
          description: Response payload (varies by endpoint)

    ErrorResponse:
      type: object
      required: [success, code, error]
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Error type/category
          example: Bad Request
        details:
          type: string
          description: Human-readable error details
          example: Invalid email format

    PaginationMeta:
      type: object
      required: [success, page, limit, total_count, total_pages]
      properties:
        success:
          type: boolean
          example: true
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Items per page
          example: 20
        total_count:
          type: integer
          description: Total number of items
          example: 150
        total_pages:
          type: integer
          description: Total number of pages
          example: 8

    # ==================== BOOTSTRAP ====================
    BootstrapResponse:
      type: object
      required: [admin_token, message, public_key_path]
      properties:
        admin_token:
          type: string
          description: JWT access token for admin user
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        message:
          type: string
          example: Admin certificate generated successfully
        public_key_path:
          type: string
          description: Path to generated RSA public key
          example: ./configs/keys/admin.pub

    # ==================== AUTHENTICATION ====================
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 100
          description: User's username
          example: max.mustermann
        password:
          type: string
          format: password
          minLength: 8
          description: User's password (min 8 characters)
          example: SecurePassword123!

    LoginResponse:
      type: object
      required: [access_token, refresh_token, token_type, expires_in, role, user_id]
      properties:
        access_token:
          type: string
          description: JWT access token (short-lived)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token:
          type: string
          description: JWT refresh token (long-lived)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type:
          type: string
          enum: [Bearer]
          example: Bearer
        expires_in:
          type: integer
          description: Access token expiry in seconds
          example: 3600
        role:
          type: string
          enum: [admin, teacher, student]
          description: User's role
          example: student
        user_id:
          type: string
          format: uuid
          description: User's unique identifier
          example: 550e8400-e29b-41d4-a716-446655440000

    RefreshTokenRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string
          description: Valid refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    # ==================== INVITATIONS ====================
    CreateInvitationRequest:
      type: object
      required: [email, first_name, last_name, role]
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: max.mustermann@example.com
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          description: User's first name
          example: Max
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          description: User's last name
          example: Mustermann
        role:
          type: string
          enum: [student, teacher]
          description: User's role
          example: student
        teacher_uuid:
          type: string
          format: uuid
          description: Required for student invitations - UUID of assigned teacher
          example: 550e8400-e29b-41d4-a716-446655440010
        department:
          type: string
          minLength: 1
          maxLength: 100
          description: Required for teacher invitations - teacher's department
          example: Computer Science

    CreateInvitationResponse:
      type: object
      required: [invitation_token, invitation_link, expires_at]
      properties:
        invitation_token:
          type: string
          description: JWT invitation token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        invitation_link:
          type: string
          format: uri
          description: Complete invitation URL to send to user
          example: https://fits.example.com/invite/eyJhbGc...
        expires_at:
          type: string
          format: date-time
          description: Token expiration timestamp
          example: "2025-10-25T12:00:00Z"

    InvitationResponse:
      type: object
      required: [email, first_name, last_name, role, expires_at]
      properties:
        email:
          type: string
          format: email
          example: max.mustermann@example.com
        first_name:
          type: string
          example: Max
        last_name:
          type: string
          example: Mustermann
        role:
          type: string
          enum: [student, teacher]
          example: student
        teacher_uuid:
          type: string
          format: uuid
          nullable: true
          description: Present for student invitations
          example: 550e8400-e29b-41d4-a716-446655440010
        department:
          type: string
          nullable: true
          description: Present for teacher invitations
          example: Computer Science
        expires_at:
          type: string
          format: date-time
          example: "2025-10-25T12:00:00Z"

    CompleteInvitationRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 100
          description: Desired username (must be unique)
          example: max.mustermann
        password:
          type: string
          format: password
          minLength: 8
          description: Password (min 8 characters, must include letters and numbers)
          example: SecurePassword123!

    # ==================== STUDENTS ====================
    Student:
      type: object
      required: [uuid, email, first_name, last_name, created_at, updated_at]
      properties:
        uuid:
          type: string
          format: uuid
          description: Student's unique identifier
          example: 550e8400-e29b-41d4-a716-446655440000
        email:
          type: string
          format: email
          description: Student's email address
          example: max.mustermann@example.com
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          description: Student's first name
          example: Max
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          description: Student's last name
          example: Mustermann
        teacher_id:
          type: string
          format: uuid
          nullable: true
          description: UUID of assigned teacher (optional)
          example: 550e8400-e29b-41d4-a716-446655440010
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-09-30T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-09-30T12:00:00Z"

    CreateStudentRequest:
      type: object
      required: [email, first_name, last_name]
      properties:
        email:
          type: string
          format: email
          description: Student's email address (must be unique)
          example: max.mustermann@example.com
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          description: Student's first name
          example: Max
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          description: Student's last name
          example: Mustermann
        teacher_id:
          type: string
          format: uuid
          nullable: true
          description: UUID of assigned teacher (optional - can be assigned later)
          example: 550e8400-e29b-41d4-a716-446655440010

    UpdateStudentRequest:
      type: object
      description: All fields are optional - only provided fields will be updated
      properties:
        email:
          type: string
          format: email
          description: New email address
          example: max.new@example.com
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          description: New first name
          example: Moritz
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          description: New last name
          example: Schmidt
        teacher_id:
          type: string
          format: uuid
          nullable: true
          description: New teacher UUID (use null to unassign)
          example: 550e8400-e29b-41d4-a716-446655440011

    PaginatedStudentsResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationMeta'
        - type: object
          required: [data]
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Student'

    # ==================== TEACHERS ====================
    Teacher:
      type: object
      required: [uuid, email, first_name, last_name, department, created_at, updated_at]
      properties:
        uuid:
          type: string
          format: uuid
          description: Teacher's unique identifier
          example: 550e8400-e29b-41d4-a716-446655440010
        email:
          type: string
          format: email
          description: Teacher's email address
          example: anna.schmidt@example.com
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          description: Teacher's first name
          example: Anna
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          description: Teacher's last name
          example: Schmidt
        department:
          type: string
          minLength: 1
          maxLength: 100
          description: Teacher's department
          example: Computer Science
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-09-28T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-09-28T10:00:00Z"

    CreateTeacherRequest:
      type: object
      required: [email, first_name, last_name, department]
      properties:
        email:
          type: string
          format: email
          description: Teacher's email address (must be unique)
          example: anna.schmidt@example.com
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          description: Teacher's first name
          example: Anna
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          description: Teacher's last name
          example: Schmidt
        department:
          type: string
          minLength: 1
          maxLength: 100
          description: Teacher's department
          example: Computer Science

    UpdateTeacherRequest:
      type: object
      description: All fields are optional - only provided fields will be updated
      properties:
        email:
          type: string
          format: email
          description: New email address
          example: maria.mueller@example.com
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          description: New first name
          example: Maria
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          description: New last name
          example: Mueller
        department:
          type: string
          minLength: 1
          maxLength: 100
          description: New department
          example: Physics

    PaginatedTeachersResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationMeta'
        - type: object
          required: [data]
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Teacher'

    # ==================== SIGNING ====================
    UploadRecord:
      type: object
      required: [upload_id, student_uuid, file_name, file_size, uploaded_at, content_hash]
      properties:
        upload_id:
          type: string
          description: Unique upload identifier
          example: upload-20251022-143000-abc123
        student_uuid:
          type: string
          format: uuid
          description: UUID of associated student
          example: 550e8400-e29b-41d4-a716-446655440000
        file_name:
          type: string
          description: Original filename
          example: weekly_report_week40.parquet
        file_size:
          type: integer
          format: int64
          description: File size in bytes
          example: 1024000
        uploaded_at:
          type: integer
          format: int64
          description: Unix timestamp in milliseconds
          example: 1729603800000
        content_hash:
          type: string
          description: SHA-256 hash of file content
          example: sha256:a3b2c1d4e5f6...

    SignRequest:
      type: object
      required: [request_id, student_uuid, week_number, year, description, created_at, status]
      properties:
        request_id:
          type: string
          description: Unique request identifier
          example: 20250930120000-abc123
        student_uuid:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        week_number:
          type: integer
          minimum: 1
          maximum: 53
          description: Week number (1-53)
          example: 40
        year:
          type: integer
          minimum: 2020
          maximum: 2100
          example: 2025
        description:
          type: string
          description: Request description
          example: Weekly report for week 40
        created_at:
          type: integer
          format: int64
          description: Unix timestamp in milliseconds
          example: 1727697600000
        status:
          type: string
          enum: [pending, signed, rejected]
          example: pending

    SignedRequest:
      type: object
      required: [request_id, student_uuid, signed, signed_at]
      properties:
        request_id:
          type: string
          description: Reference to original sign request
          example: 20250930120000-abc123
        student_uuid:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        signed:
          type: boolean
          description: Whether request was signed or rejected
          example: true
        signature:
          type: string
          description: Base64-encoded signature data
          example: base64_signature_data_here...
        signed_at:
          type: integer
          format: int64
          description: Unix timestamp in milliseconds
          example: 1727697600000
        reason:
          type: string
          nullable: true
          description: Optional reason for rejection
          example: Approved by teacher
