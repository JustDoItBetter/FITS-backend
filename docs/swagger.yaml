basePath: /
definitions:
  github_com_JustDoItBetter_FITS-backend_internal_common_pagination.Response:
    properties:
      data: {}
      limit:
        example: 20
        type: integer
      page:
        example: 1
        type: integer
      success:
        example: true
        type: boolean
      total_count:
        example: 150
        type: integer
      total_pages:
        example: 8
        type: integer
    type: object
  github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      details:
        example: field validation failed
        type: string
      error:
        example: invalid request
        type: string
      success:
        example: false
        type: boolean
    type: object
  github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse:
    properties:
      data: {}
      message:
        example: operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  internal_domain_auth.BootstrapResponse:
    description: Admin bootstrap response
    properties:
      admin_token:
        example: eyJhbGc...
        type: string
      message:
        example: Admin certificate generated successfully
        type: string
      public_key_path:
        example: ./configs/keys/admin.pub
        type: string
    type: object
  internal_domain_auth.CompleteInvitationRequest:
    description: Complete invitation with credentials
    properties:
      password:
        example: SecurePassword123!
        minLength: 8
        type: string
      username:
        example: max.mustermann
        maxLength: 100
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  internal_domain_auth.CreateInvitationRequest:
    description: Create invitation for new user
    properties:
      department:
        description: Required for teachers
        example: IT
        maxLength: 100
        minLength: 1
        type: string
      email:
        example: max@example.com
        type: string
      first_name:
        example: Max
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        example: Mustermann
        maxLength: 100
        minLength: 1
        type: string
      role:
        enum:
        - student
        - teacher
        example: student
        type: string
      teacher_uuid:
        description: Required for students
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - email
    - first_name
    - last_name
    - role
    type: object
  internal_domain_auth.CreateInvitationResponse:
    description: Created invitation with link
    properties:
      expires_at:
        example: "2025-10-25T12:00:00Z"
        type: string
      invitation_link:
        example: https://fits.example.com/invite/eyJhbGc...
        type: string
      invitation_token:
        example: eyJhbGc...
        type: string
    type: object
  internal_domain_auth.InvitationResponse:
    description: Invitation information
    properties:
      department:
        example: IT
        type: string
      email:
        example: max@example.com
        type: string
      expires_at:
        example: "2025-10-25T12:00:00Z"
        type: string
      first_name:
        example: Max
        type: string
      last_name:
        example: Mustermann
        type: string
      role:
        example: student
        type: string
      teacher_uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  internal_domain_auth.LoginRequest:
    description: Login credentials
    properties:
      password:
        example: SecurePassword123!
        minLength: 8
        type: string
      username:
        example: max.mustermann
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  internal_domain_auth.LoginResponse:
    description: Login response with tokens
    properties:
      access_token:
        example: eyJhbGc...
        type: string
      expires_in:
        description: Seconds
        example: 3600
        type: integer
      refresh_token:
        example: eyJhbGc...
        type: string
      role:
        example: student
        type: string
      token_type:
        example: Bearer
        type: string
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  internal_domain_auth.RefreshTokenRequest:
    description: Refresh token request
    properties:
      refresh_token:
        example: eyJhbGc...
        type: string
    required:
    - refresh_token
    type: object
  internal_domain_signing.UploadRecord:
    description: File upload record information
    properties:
      content_hash:
        example: sha256:abc123...
        type: string
      file_name:
        example: report.parquet
        type: string
      file_size:
        example: 1024000
        type: integer
      student_uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      upload_id:
        example: upload-123-456
        type: string
      uploaded_at:
        example: 1727697600000
        type: integer
    type: object
  internal_domain_student.CreateStudentRequest:
    description: Request body for creating a new student
    properties:
      email:
        example: max@example.com
        type: string
      first_name:
        example: Max
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        example: Mustermann
        maxLength: 100
        minLength: 1
        type: string
      teacher_id:
        description: Optional - can be assigned later
        example: teacher-uuid-123
        type: string
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - email
    - first_name
    - last_name
    type: object
  internal_domain_student.Student:
    description: Student information
    properties:
      created_at:
        example: "2025-09-30T12:00:00Z"
        type: string
      email:
        example: max@example.com
        type: string
      first_name:
        example: Max
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        example: Mustermann
        maxLength: 100
        minLength: 1
        type: string
      teacher_id:
        description: Optional - can be NULL
        example: teacher-uuid-123
        type: string
      updated_at:
        example: "2025-09-30T12:00:00Z"
        type: string
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - email
    - first_name
    - last_name
    - uuid
    type: object
  internal_domain_student.UpdateStudentRequest:
    description: Request body for updating a student
    properties:
      email:
        example: moritz@example.com
        type: string
      first_name:
        example: Moritz
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        example: Schmidt
        maxLength: 100
        minLength: 1
        type: string
      teacher_id:
        example: teacher-uuid-456
        type: string
    type: object
  internal_domain_teacher.CreateTeacherRequest:
    description: Request body for creating a new teacher
    properties:
      department:
        example: Computer Science
        maxLength: 100
        minLength: 1
        type: string
      email:
        example: anna@example.com
        type: string
      first_name:
        example: Anna
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        example: Schmidt
        maxLength: 100
        minLength: 1
        type: string
      uuid:
        example: teacher-uuid-123
        type: string
    required:
    - department
    - email
    - first_name
    - last_name
    type: object
  internal_domain_teacher.Teacher:
    description: Teacher information
    properties:
      created_at:
        example: "2025-09-30T12:00:00Z"
        type: string
      department:
        example: Computer Science
        maxLength: 100
        minLength: 1
        type: string
      email:
        example: anna@example.com
        type: string
      first_name:
        example: Anna
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        example: Schmidt
        maxLength: 100
        minLength: 1
        type: string
      updated_at:
        example: "2025-09-30T12:00:00Z"
        type: string
      uuid:
        example: teacher-uuid-123
        type: string
    required:
    - department
    - email
    - first_name
    - last_name
    - uuid
    type: object
  internal_domain_teacher.UpdateTeacherRequest:
    description: Request body for updating a teacher
    properties:
      department:
        example: Mathematics
        maxLength: 100
        minLength: 1
        type: string
      email:
        example: maria@example.com
        type: string
      first_name:
        example: Maria
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        example: MÃ¼ller
        maxLength: 100
        minLength: 1
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@fits.example.com
    name: API Support
  description: FITS (Flexible IT Training System) Backend API for managing students,
    teachers, and signing requests with full authentication
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: FITS Backend API
  version: "1.0"
paths:
  /api/v1/admin/invite:
    post:
      consumes:
      - application/json
      description: Create invitation link for student or teacher (Admin only)
      parameters:
      - description: Invitation data
        in: body
        name: invitation
        required: true
        schema:
          $ref: '#/definitions/internal_domain_auth.CreateInvitationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_domain_auth.CreateInvitationResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create invitation
      tags:
      - invitations
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate with username and password, returns access and refresh
        tokens
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/internal_domain_auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_domain_auth.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      summary: User login
      tags:
      - auth
  /api/v1/auth/logout:
    post:
      description: Logout user by invalidating all refresh tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/internal_domain_auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_domain_auth.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /api/v1/bootstrap/init:
    post:
      description: Generates admin RSA keypair and returns admin token. Can only be
        called once.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_domain_auth.BootstrapResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      summary: Initialize admin certificate
      tags:
      - bootstrap
  /api/v1/invite/{token}:
    get:
      description: Get invitation information by token
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_domain_auth.InvitationResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      summary: Get invitation details
      tags:
      - invitations
  /api/v1/invite/{token}/complete:
    post:
      consumes:
      - application/json
      description: Complete user registration with username and password
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/internal_domain_auth.CompleteInvitationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      summary: Complete invitation
      tags:
      - invitations
  /api/v1/sign_requests:
    get:
      description: Retrieve all pending sign requests as a parquet file
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Parquet file with pending sign requests
          schema:
            type: file
        "501":
          description: Not Implemented
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      summary: Get pending sign requests
      tags:
      - signing
  /api/v1/sign_uploads:
    post:
      consumes:
      - multipart/form-data
      description: Upload a parquet file containing signed requests
      parameters:
      - description: Parquet file with signed requests
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "501":
          description: Not Implemented
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      summary: Upload signed requests
      tags:
      - signing
  /api/v1/student:
    get:
      description: |-
        Retrieves a paginated list of students. Supports page and limit query parameters.
        Default: page=1, limit=20. Maximum limit is 100 to prevent performance issues.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of students with metadata
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_pagination.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/internal_domain_student.Student'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      summary: List students with pagination
      tags:
      - Students
    put:
      consumes:
      - application/json
      description: Creates a new student record. Requires admin role. Email must be
        unique.
      parameters:
      - description: Student creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_domain_student.CreateStudentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Student created successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_domain_student.Student'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "403":
          description: Forbidden - requires admin role
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "409":
          description: Conflict - email already exists
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "422":
          description: Validation error - invalid field values
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new student
      tags:
      - Students
  /api/v1/student/{uuid}:
    delete:
      description: Permanently deletes a student from the system (soft delete). Requires
        admin role.
      parameters:
      - description: Student UUID
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Student deleted successfully (no content)
        "400":
          description: Invalid UUID format
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "403":
          description: Forbidden - requires admin role
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "404":
          description: Student not found
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a student
      tags:
      - Students
    get:
      description: Retrieves detailed information about a specific student by their
        UUID. Public endpoint.
      parameters:
      - description: Student UUID
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Student found
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_domain_student.Student'
              type: object
        "400":
          description: Invalid UUID format
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "404":
          description: Student not found
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      summary: Get student by UUID
      tags:
      - Students
    post:
      consumes:
      - application/json
      description: Updates an existing student's information. Requires admin role.
        Supports partial updates.
      parameters:
      - description: Student UUID
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Student update request (partial updates supported)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_domain_student.UpdateStudentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Student updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_domain_student.Student'
              type: object
        "400":
          description: Invalid request body or UUID
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "403":
          description: Forbidden - requires admin role
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "404":
          description: Student not found
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "409":
          description: Conflict - email already exists
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "422":
          description: Validation error - invalid field values
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update student information
      tags:
      - Students
  /api/v1/teacher:
    get:
      description: |-
        Retrieves a paginated list of teachers. Supports page and limit query parameters.
        Default: page=1, limit=20. Maximum limit is 100 to prevent performance issues.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of teachers with metadata
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_pagination.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/internal_domain_teacher.Teacher'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      summary: List teachers with pagination
      tags:
      - Teachers
    post:
      consumes:
      - application/json
      description: Creates a new teacher record. Requires admin role. Email must be
        unique. Department is required.
      parameters:
      - description: Teacher creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_domain_teacher.CreateTeacherRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Teacher created successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_domain_teacher.Teacher'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "403":
          description: Forbidden - requires admin role
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "409":
          description: Conflict - email already exists
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "422":
          description: Validation error - invalid field values
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new teacher
      tags:
      - Teachers
  /api/v1/teacher/{uuid}:
    delete:
      description: Permanently deletes a teacher from the system (soft delete). Requires
        admin role.
      parameters:
      - description: Teacher UUID
        example: 550e8400-e29b-41d4-a716-446655440010
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Teacher deleted successfully (no content)
        "400":
          description: Invalid UUID format
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "403":
          description: Forbidden - requires admin role
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "404":
          description: Teacher not found
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a teacher
      tags:
      - Teachers
    get:
      description: Retrieves detailed information about a specific teacher by their
        UUID. Public endpoint.
      parameters:
      - description: Teacher UUID
        example: 550e8400-e29b-41d4-a716-446655440010
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Teacher found
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_domain_teacher.Teacher'
              type: object
        "400":
          description: Invalid UUID format
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "404":
          description: Teacher not found
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      summary: Get teacher by UUID
      tags:
      - Teachers
    post:
      consumes:
      - application/json
      description: Updates an existing teacher's information. Requires admin role.
        Supports partial updates including department changes.
      parameters:
      - description: Teacher UUID
        example: 550e8400-e29b-41d4-a716-446655440010
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Teacher update request (partial updates supported)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_domain_teacher.UpdateTeacherRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Teacher updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_domain_teacher.Teacher'
              type: object
        "400":
          description: Invalid request body or UUID
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "403":
          description: Forbidden - requires admin role
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "404":
          description: Teacher not found
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "409":
          description: Conflict - email already exists
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "422":
          description: Validation error - invalid field values
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update teacher information
      tags:
      - Teachers
  /api/v1/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a parquet file containing student data
      parameters:
      - description: Parquet file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_domain_signing.UploadRecord'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
        "501":
          description: Not Implemented
          schema:
            $ref: '#/definitions/github_com_JustDoItBetter_FITS-backend_internal_common_response.ErrorResponse'
      summary: Upload parquet file
      tags:
      - signing
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: 'Bearer token authentication. Format: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
